{
    "": "",
    "Lines of code": "https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L211-L221",
    "Vulnerability details": "#",
    "Impact": "**MED** - the function of the protocol could be impacted\n\n#",
    "Proof of Concept": "- [proof of concept](https://gist.github.com/zzzitron/a8c6067923a87af8e001c05442258370#file-2022-07-juiceboxv2-t-sol-L117-L163)\n\nThe proof of concept demonstrates to discard one of  duplicated locked splits. In the beginning it launches a project with two identical locked splits. As the owner of the project, it updates splits to only one of the two splits. Since all of original splits are locked both of them should still in the split after the update, but only one of them exists in the updated splits.\n\nIt happens because [the check of the locked split](https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L211-L221) is not suitable for duplicated cases.\n\n```solidity\n// JBSplitsStore::_set\n\n203    // Check to see if all locked splits are included.\n204    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\n205      // If not locked, continue.\n206      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;\n207\n208      // Keep a reference to whether or not the locked split being iterated on is included.\n209      bool _includesLocked = false;\n210\n211      for (uint256 _j = 0; _j < _splits.length; _j++) {\n212        // Check for sameness.\n213        if (\n214          _splits[_j].percent == _currentSplits[_i].percent &&\n215          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&\n216          _splits[_j].allocator == _currentSplits[_i].allocator &&\n217          _splits[_j].projectId == _currentSplits[_i].projectId &&\n218          // Allow lock extention.\n219          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil\n220        ) _includesLocked = true;\n221      }\n222\n223      if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n224    }\n```\n\n#",
    "Tools Used": "None\n\n#",
    "Recommended Mitigation Steps": "Either prevent duplicates in the splits or track the matches while checking the locked splits."
}