{
    "id": 27029,
    "issue_protocol": {
      "id": 1061,
      "name": "Centrifuge",
      "category_list": []
    },
    "title": "[M-01] `onlyCentrifugeChainOrigin()` can't require `msg.sender` equal `axelarGateway`",
    "content": "\nIn `AxelarRouter.sol`, we need to ensure the legitimacy of the `execute()` method execution, mainly through two methods:\n\n1.  `axelarGateway.validateContractCall ()` to validate if the `command` is approved or not.\n2.  `onlyCentrifugeChainOrigin()` is used to validate that `sourceChain` `sourceAddress` is legal.\n\nLet's look at the implementation of `onlyCentrifugeChainOrigin()`:\n\n```solidity\n    modifier onlyCentrifugeChainOrigin(string calldata sourceChain, string calldata sourceAddress) {        \n@>      require(msg.sender == address(axelarGateway), \"AxelarRouter/invalid-origin\");\n        require(\n            keccak256(bytes(axelarCentrifugeChainId)) == keccak256(bytes(sourceChain)),\n            \"AxelarRouter/invalid-source-chain\"\n        );\n        require(\n            keccak256(bytes(axelarCentrifugeChainAddress)) == keccak256(bytes(sourceAddress)),\n            \"AxelarRouter/invalid-source-address\"\n        );\n        _;\n    }\n```\n\nThe problem is that this restriction `msg.sender == address(axelarGateway)`.\n\nWhen we look at the official `axelarGateway.sol` contract, it doesn't provide any call external contract 's`execute()` method.\n\nSo `msg.sender` cannot be `axelarGateway`, and the official example does not restrict `msg.sender`.\n\nThe security of the command can be guaranteed by `axelarGateway.validateContractCall()`, `sourceChain`, `sourceAddress`.\n\nThere is no need to restrict `msg.sender`.\n\n`axelarGateway` code address<br>\n<https://github.com/axelarnetwork/axelar-cgp-solidity/blob/main/contracts/AxelarGateway.sol>\n\nCan't find anything that calls `router.execute()`.\n\n### Impact\n\n`router.execute()` cannot be executed properly, resulting in commands from other chains not being executed\uff0c protocol not working properly.\n\n### Recommended Mitigation\n\nRemove `msg.sender` restriction\n\n```diff\n    modifier onlyCentrifugeChainOrigin(string calldata sourceChain, string calldata sourceAddress) {        \n-       require(msg.sender == address(axelarGateway), \"AxelarRouter/invalid-origin\");\n        require(\n            keccak256(bytes(axelarCentrifugeChainId)) == keccak256(bytes(sourceChain)),\n            \"AxelarRouter/invalid-source-chain\"\n        );\n        require(\n            keccak256(bytes(axelarCentrifugeChainAddress)) == keccak256(bytes(sourceAddress)),\n            \"AxelarRouter/invalid-source-address\"\n        );\n        _;\n    }\n```\n\n### Assessed type\n\nContext\n\n**[hieronx (Centrifuge) confirmed](https://github.com/code-423n4/2023-09-centrifuge-findings/issues/537#issuecomment-1723464758)**\n\n**[gzeon (judge) increased severity to High and commented](https://github.com/code-423n4/2023-09-centrifuge-findings/issues/537#issuecomment-1733894416):**\n > This seems High risk to me since the Axelar bridge is a centerpiece of this protocol, and when deployed in a certain way where the AxelarRouter is the only ward, it might cause user deposits to be stuck forever. \n\n**[gzeon (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2023-09-centrifuge-findings/issues/537#issuecomment-1735848904):**\n > Reconsidering severity to Medium here since the expected setup would have DelayedAdmin able to unstuck the system.\n\n**[hieronx (Centrifuge) commented](https://github.com/code-423n4/2023-09-centrifuge-findings/issues/537#issuecomment-1745247688):**\n > Mitigated in https://github.com/centrifuge/liquidity-pools/pull/168\n\n\n\n***\n\n",
    "kind": "GIT",
    "issue_source": {
      "name": "Code4rena",
      "url": "https://code4rena.com",
      "logo_square_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/code4rena_square.png",
      "logo_horizontal_url": "https://solodit-bucket.s3.amazonaws.com/storage/images/af_logos/code4rena_horizontal.png",
      "has_contest": true
    },
    "impact": "MEDIUM",
    "tag_list": [],
    "finder_list": [
      "bin2chen",
      "merlin",
      "mert\\_eren",
      "nobody2018",
      "castle\\_chain",
      "maanas"
    ],
    "finders_count": 6,
    "report_date": "2023-09-08T20:00:00Z",
    "contest_prize_txt": "70000",
    "contest_link": "https://code4rena.com/reports/2023-09-centrifuge",
    "sponsor_name": "Centrifuge",
    "quality_score": 0.0,
    "general_score": 0.0,
    "source_link": "https://code4rena.com/reports/2023-09-centrifuge",
    "github_link": "https://github.com/code-423n4/2023-09-centrifuge-findings/issues/537",
    "pdf_link": "",
    "pdf_page_from": 0,
    "bookmarked": false,
    "bookmarked_total": 0,
    "markasread": false,
    "change_logs": [],
    "editor_comments": [],
    "github_dicussion_no": 20805,
    "openai_explained": true,
    "summary": "\nThis bug report is about the `execute()` method in the `AxelarRouter.sol` contract. The method has two methods for ensuring the legitimacy of the execution, `axelarGateway.validateContractCall()` and `onlyCentrifugeChainOrigin()`. The `onlyCentrifugeChainOrigin()` method has a restriction `msg.sender == address(axelarGateway)` which is not necessary. This restriction prevents the execution of the `execute()` method from other chains, resulting in the protocol not working properly. \n\nThe security of the command can be guaranteed by `axelarGateway.validateContractCall()`, `sourceChain`, `sourceAddress` without the need to restrict `msg.sender`. The bug was confirmed by hieronx (Centrifuge) and the severity was increased to High by gzeon (judge). Later, the severity was decreased to Medium as the expected setup would have DelayedAdmin able to unstuck the system. The bug was mitigated in a pull request.",
    "similar_issue_list": [
      {
        "id": 7042,
        "title": "Bridge with Axelar can be stolen with malicious external call",
        "slug": "bridge-with-axelar-can-be-stolen-with-malicious-external-call-spearbit-lifi-pdf"
      },
      {
        "id": 7046,
        "title": "Hardcode or whitelist the Axelar destinationAddress",
        "slug": "hardcode-or-whitelist-the-axelar-destinationaddress-spearbit-lifi-pdf"
      },
      {
        "id": 24958,
        "title": "[M-03] `_execute` can potentially reorder a batch of commands while executing, breaking any assumptions on command orders.",
        "slug": "m-03-_execute-can-potentially-reorder-a-batch-of-commands-while-executing-breaking-any-assumptions-on-command-orders-code4rena-axelar-network-axelar-network-git"
      }
    ],
    "user_note": {
      "created_at": null,
      "note": ""
    },
    "slug": "m-01-onlycentrifugechainorigin-cant-require-msgsender-equal-axelargateway-code4rena-centrifuge-centrifuge-git"
  }