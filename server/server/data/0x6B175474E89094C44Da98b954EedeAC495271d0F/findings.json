[{"title":"all the function selectors are hardcoded","severity":"MEDIUM","mitigation":"Add a field to the structs of the library that contain the function selectors and hash it in the salt."},{"title":"ERC721Elliot: Missing `Transfer` event in `safeTransferFrom` may lead to non-interoperability","severity":"MEDIUM","mitigation":"Include separated `Transfer` event in `safeTransferFrom` function:\n\n    emit Transfer(exOwner, to, tokenId);"},{"title":"`receiveMark()` does not create events in the expected format","severity":"MEDIUM","mitigation":"Adjust the way logging is done to be inline with the applied ABI encoding of the expected log event."},{"title":"Executive friability as a consequence of incorrect severity by the complier","severity":"MEDIUM","mitigation":" We recommend that you choose the same semantics as the Solidity 0.5 compiler for all three possible values:\n\nThe compiler when 0.5.1 is passed emits the error and reverts the transaction\nThe compiler when 0.5.0 is passed reverts the transaction\nThe compiler when 0.5 is passed emits the error and reverts the transaction."},{"title":"`Rely` and `deny` functions in Note and Authority are implemented incorrectly and their utilizations in Maker contracts and modules are inconsistent","severity":"MEDIUM","mitigation":"An attack scenario where a malicious actor calls the Moloch `drip` function via a flashloan could create the same situation as with a flashmint in the attack mentioned above.\n\nInclude the changes proposal of the DssV1DrumOracleMMLightNFTEtherbite in the following signal request:\n\n**BEFORE** proceeding with the Liq 2.0 executive proposal will be performed once the oracle proposal passed\n\n#4364\n[![npm version](https://badge.fury.io/js/signal-cli.svg)](https://www.npmjs.com/package/signal-cli)\n\n@cybrblock @stvntme\n\n# DSS-4361 Lemonade Stand Mulberry & ChainOnTop NFT UCSSniper Attack Xenon DelekRoyale fKoop 2.0\n\nwhy not enter sushi making competitions often? We support it elsewhere.\n\n\n\nEther bites Unicode Cuisine Standard exploit of OasisLennyBite and Gnosis NogginLoaf\n- attack scenario using 0 percetage buyout using Nitter \n\nSilvertooth NFT Delegated_ORC_AirdropForge LiquidationStation(Auction)Block \nAlso savvy sneaky fox benevolent adepts \n\nThank you."},{"title":"`DAI` and `DAIModified` are different","severity":"MEDIUM","mitigation":"`DAIModified` has been provided, but it is recommended that the token is made ERC777 from the beginning, as it would be inconvenient and more costly for users of `DAI` to switch to `DAIModified`. Or consider the suggestion of adding transfer to `DAI` token."},{"title":"A regular transfer will set the allowance","severity":"MEDIUM","mitigation":"Instead of setting the allowance in the transfer and transferFrom, use ‘Func.UPDATE_HASH’ in the following way:\n    {\n        Func.TRANSFER       : 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff,\n        Func.UPDATE_HASH    : 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe,\n        Func.TRANSFER_FROM  : 0x0000000000000000000000000000000000000000000000000000000000000000\n    }\nThis will prevent using the hash of the allowance provide and transfer to front run trust schemes\n\n***"},{"title":"Insufficient input validation in add overload can help user to steal fund of cToken","severity":"MEDIUM","mitigation":"Delay the transferable period or use minting instead of transferable, disable the proposal and voting module in the first N days, etc."},{"title":"UnsafeMath library is not used properly","severity":"MEDIUM","mitigation":"The easy way to fix it is to change the `mul` function by `safeMul`, the `div` function by `safeDiv`, `add` by `safeAdd` and `(sub` by `safeSub`.\n\nBut the best would be remove the unsafe math entirely and use OpenZeppeling's math contracts."},{"title":"EIP2612 <span class=\"user-input-code language-yaml\" style=\"font: 13.3333px &quot;Fira Code&quot;, mark-sup\">permit</span> and EIP3009 domain separation are shared between contracts","severity":"MEDIUM","mitigation":"The protocol can carefully manage, which external projects can utilize the `permit` function of the Pool.sol contract. This would however limit the potential possibilities how the protocol is used, including the aeternity native token."},{"title":"`DOMAIN_SEPARATOR` is different because of different `name` and `version` between governance and AMP","severity":"MEDIUM","mitigation":"Make sure `name` and `version` are consistent across the protocol."},{"title":"Attacker can manipulate collateral token balance of tropykuswAPWETH in balancer with hacked USDP peg","severity":"MEDIUM","mitigation":"When sending undistributed rewards to the token address, check `balanceOf('token address) - verticalVault.balanceOfFakeReward()`."},{"title":"ERC20 Base behavior not followed by transfer() and transferFrom()","severity":"MEDIUM","mitigation":"Implement the `safeTransfer()` (or `transfer()`) and `safeTransferFrom()` functions per the ERC20 standard."},{"title":"Reentrancy attack is possible in `safeTransferFrom`","severity":"MEDIUM","mitigation":"Use OpenZeppelin's ReentrancyGuard or Solidity's 0.8.x \"checked reentrancy\" feature in `safeTransferFrom`.\n\n#"},{"title":"MFA chain data can be manipulated by the DAO and critical NFT can be minted, resulting in economic losses","severity":"MEDIUM","mitigation":"Do not allow DAO to mint NFTs during the cooldown period."},{"title":"Denial of service via burnFrom function","severity":"MEDIUM","mitigation":"Do not decrease the allowance when burning."},{"title":"Synthetic asset supply rate restricted by wealth, not aggregate Liqity","severity":"MEDIUM","mitigation":"Suppl 100% of user's wealth."},{"title":"Owner can grant unlimited allowance to itself","severity":"MEDIUM","mitigation":"The allowance value can be fetched from the delegation mapping in the `allow` function."},{"title":"BUSD gem: Can pull more than the allowed amount","severity":"MEDIUM","mitigation":"The `pull()` function should have a restriction to not allow more than the allowed amount.\n\n#"},{"title":"MEV or sandwich attack in rugpullSlot","severity":"MEDIUM","mitigation":"Use function move from DSProxy or similar to disable the possibility of MEV/sandwich attack victims\nIf the proxy mechanism is an entry point do not let malicious actor withdraw, this is more complex, to mitigate well would have to consider and understand thoroughly the source protocol."},{"title":"Bypass of whitelisting of hMKN Token upgradability by passing signature to `executeOnBehalf` continued","severity":"MEDIUM","mitigation":"Introduce a nonce insuring that different messages are passed to the function as single byte change in the message leads to a different message hash and hence a distinct signature."},{"title":"`TRANSFER_TITLE` for EIP712 signing does not include the block timstamp","severity":"MEDIUM","mitigation":"```diff\n    function DOMAIN_TYPEHASH() public pure override returns (bytes32) {\n        return keccak256(\"EIP712Domain(name,string,chainId,verifyingContract)\");\n    }\n\n+    function TRANSFER_TITLE_TYPEHASH() public pure returns (bytes32) {\n+        return keccak256(\"TransferTitle(address holder,address from,address to,uint256 tokenId,uint256 expiry)\");\n+    }\n\n+    function PERMIT_TYPEHASH() public pure returns (bytes32) {\n+        return keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n+    }\n+\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH(),\n                keccak256(\"IgnitionDAO Title\"),\n                keccak256(name()),\n                _chainId,\n                address(this)\n            )\n        );\n    }\n\n-    function PERMIT_TYPEHASH() public override returns (bytes32) {\n-        return keccak256(abi.encode(PERMIT_TYPEHASH,\n-                                 holder,\n-                                 spender,\n-                                 nonce,\n-                                 expiry,\n-                                 allowed))\n-    }\n+    function PERMIT_TYPEHASH() public override returns (bytes32) {\n+        return keccak256(abi.encode(PERMIT_TYPEHASH(),this, holder, spender, nonce, expiry, allowed))\n+    }\n\n\n```"},{"title":"Arbitrary signature of permit can be created","severity":"HIGH","mitigation":"Add chain id in the digest so that the signature hash is unique for the EIP712 domain."},{"title":"Mixup CVE-2022-0514: Dual value approval might not get set properly","severity":"MEDIUM","mitigation":"Fix the issue by updating the approval in accordance with `allowed` variable.\n```solidity\n    function setApproval(address holder, address spender, bool dual, bool allowed) internal {\n        uint wad = allowed ? uint(-1) : 0;\n        allowance[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    } \n``` "}]