<style>
  .data-container td {
    color: white;
  }
  .security_info_title {
    font-size: 16px;
    font-weight: 800;
  }
  #data p{
    line-height: 30px;
  }

  .files-table-head {
    display: flex;
    gap: 10px;
    justify-content: space-evenly;
    background-color: black;
    border-radius: 6px;
    background: #303030;
  }

  .files-table-head h3 {
    font-size: 16px;
  }

  .files-table-head h3:last-child {
    font-weight: 300;
    color: #58ff5e;
  }

  .files-table-value {
    display: flex;
    gap: 10px;
    justify-content: center;
    border-bottom-left-radius: 31px;
    border-bottom-right-radius: 31px;
    background: #fff;
  }

  .files-table-value h3 {
    color: black;
    padding: 10px 30px;
    min-height: 100px;
    height: 100%;
    margin: 0;
    display: flex;
    gap: 10px;
    justify-content: center;
    align-items: center;
  }

  .files-table-value h3:last-child {
    border-left: 1px solid black;
    font-weight: 400;
    width: 100%;
  }
  .imported-package {
    display: flex;
  }
  .imported-package-text {
    display: flex;
    flex-direction: column;
    width: 50%;
    padding: 0 0px;
  }
  .imported-package-subdiv {
    border-radius: 20px;
    padding: auto 20px;
    background: #2c2c2c;
    display: flex;
    margin-top: 20px;
    gap: 10px;
    flex-direction: column;
    width: 50%;
    margin: 30px 0 0 20px;
    justify-content: center;
    font-weight: 800;
  }
  .imported-package-subdiv ul {
    margin-top: 10px;
    margin-bottom: 10px;
  }

  .imported-package-subdiv li {
    margin-bottom: 5px;
  }

.security-table {
    width: 90%;
    margin: 0 auto;
    border-collapse: collapse;
    border: 1px solid black;
    border-radius: 10px;
    overflow: hidden;
}

.security-table tr:first-child {
    background: #303030;
}


.security-table tr:first-child td:first-child {
    border-radius: 6px;
    padding: 25px;
}

.security-table tr:first-child td:last-child {
    text-align: right;
    padding-right: 20px;
}

.security-table.success tr:first-child td:last-child {
    color: #58ff5e;
}

.security-table.error tr:first-child td:last-child {
    color: #ff5858;
}

.security-table tr:nth-child(2) {
    background-color: white;
}

.security-table tr:nth-child(2) td:first-child {
    color: black;
    padding: 10px 30px;
    text-align: center;
    border-right: 1px solid #303030;
    font-family: Montserrat;
    font-size: 20px;
    font-style: normal;
    font-weight: 900;
    border-bottom-left-radius: 32px;
    width: 30%;
}

.security-table tr:nth-child(2) td:last-child {
    color: black;
    padding: 38px 30px;
    text-align: center;
    font-family: Montserrat;
    font-size: 20px;
    font-style: normal;
    font-weight: 400;
    border-bottom-right-radius: 32px;
    width: 100%;
}
</style>

<div>
  <ptitle>

  <h1 class="title-button" style="font-size: 24px">Overall Security</h1>
  </ptitle>
  <div id="data">
    <div>
      <% let address = info.address.toLowerCase() %>

      <% security =security.result[address] %>
      <h2>Honeypot</h2>
      <p>
        Honeypots are smart contracts that appear to have an obvious flaw in
        their design, which allows an arbitrary user to drain ether (Ethereum's
        cryptocurrency) from the contract, given that the user transfers a
        priori a certain amount of ether to the contract.
      </p>
    </div>

    <table class="security-table <%= security.is_honeypot != '1' ? 'success' : 'error' %>">
        <tr>
          <td>Is it a honeypot?</td>
          <td>
            <%= security.is_honeypot == "1" ? "⚠️ The contract is a Honey Pot" : "✅  The contract is not a Honey Pot" %>
          </td>
        </tr>
        <tr>
        <td>
            Description
        </td>
        <td>
        <%= security.is_honeypot == "1" ? "Owner can drain your wallet" : "Owner cannot drain your wallet through honeypot" %>
        </td>
        </tr>
      </table>


    <div>
      <div>
        <h2>Antiwhale</h2>
        <p>
          Certain features adopted to prevent large holders (aka whales) from
          exerting excessive influence or engaging in manipulative behaviors
          within the token ecosystem. Some examples are setting maximum
          transaction limits, imposing penalties for transactions exceeding some
          specific threshhold, imposing a more equitable distribution of tokens
        </p>
      </div>


      <table class="security-table <%= security.is_anti_whale == '1' ? 'success' : 'error' %>">
        <tr>
          <td>Can whales dump?</td>
          <td>
            <%= security.is_anti_whale == "1" ? "✅ The contract is Anti Whale" : "⚠️ The contract is not Anti Whale" %>
          </td>
        </tr>
        <tr>
        <td>
            Description
        </td>
        <td>
        <%= security.is_anti_whale == "1" ? "Whales can't dump" : "Whales might dump" %>
        </td>
        </tr>
      </table>
    </div>
    <div class="page-break-before">&nbsp;</div>
    <!-- <div>
              <h2>Liquidity Pool</h2>
                  <table>
                      <tr>
                          <th>Check</th>
                          <th>Value</th>
                      </tr>
                      <tr>
                          <td>LP supply</td>
                          <td><%= security.lp_total_supply %></td>
                      </tr>
                      <tr>
                          <td>LP Holder Count</td>
                          <td><%= security.lp_holder_count %></td>
                      </tr>
                      <tr>
                          <td>Pencentage owned by creator</td>
                          <td><%= security.creator_percent %></td>
                      </tr>
                      <tr>
                          <td>Creator Balance</td>
                          <td><%= security.creator_balance %></td>
                      </tr>
                      <tr>
                          <td>Creator address</td>
                          <td><%= security.creator_address %></td>
                      </tr>
                      <tr>
                      <td>Holders</td>
                      <td><%= security.holder_count %></td>
                  </tr>
              </table>
          </div> -->
  </div>

  <!-- <div>
              <div>
                  <h2>Public Functions</h2>
                  <table>
                      <tr>
                          <th>Function Name</th>
                          <th>Visibility</th>
                          <th>Mutability</th>
                      </tr>
                      <% for (let i = 0; i < functions.tableRows.length; i++) { %>
                          <% if(functions.tableRows[i].type=="func" && functions.tableRows[i].spec!="Internal 🔒"){ %>
                          <tr>
                              <td><%= functions.tableRows[i].name %></td>
                              <td><%= functions.tableRows[i].spec.split(' ')[0] %></td>
                              <td><%= functions.tableRows[i].mutating ? "⚠️" : 'False' %></td>
                          </tr>
                          <% } %>
                      <% } %>
                  </table>
              </div>
          </div> -->
  <!-- <div>
              <h2>Contracts used</h2>
              <ul>
                  <% for (let i = 0; i < functions.tableRows.length; i++) { %>
                      <% if(functions.tableRows[i].type=="contract" ){ %>
                          <li><%= functions.tableRows[i].name %></li>
                      <% } %>
                  <% } %>
              </ul>
          </div> -->
</div>
