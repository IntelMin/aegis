# Lines of code

https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L211-L221


# Vulnerability details

## Impact

**MED** - the function of the protocol could be impacted

## Proof of Concept

- [proof of concept](https://gist.github.com/zzzitron/a8c6067923a87af8e001c05442258370#file-2022-07-juiceboxv2-t-sol-L117-L163)

The proof of concept demonstrates to discard one of  duplicated locked splits. In the beginning it launches a project with two identical locked splits. As the owner of the project, it updates splits to only one of the two splits. Since all of original splits are locked both of them should still in the split after the update, but only one of them exists in the updated splits.

It happens because [the check of the locked split](https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L211-L221) is not suitable for duplicated cases.

```solidity
// JBSplitsStore::_set

203    // Check to see if all locked splits are included.
204    for (uint256 _i = 0; _i < _currentSplits.length; _i++) {
205      // If not locked, continue.
206      if (block.timestamp >= _currentSplits[_i].lockedUntil) continue;
207
208      // Keep a reference to whether or not the locked split being iterated on is included.
209      bool _includesLocked = false;
210
211      for (uint256 _j = 0; _j < _splits.length; _j++) {
212        // Check for sameness.
213        if (
214          _splits[_j].percent == _currentSplits[_i].percent &&
215          _splits[_j].beneficiary == _currentSplits[_i].beneficiary &&
216          _splits[_j].allocator == _currentSplits[_i].allocator &&
217          _splits[_j].projectId == _currentSplits[_i].projectId &&
218          // Allow lock extention.
219          _splits[_j].lockedUntil >= _currentSplits[_i].lockedUntil
220        ) _includesLocked = true;
221      }
222
223      if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();
224    }
```


## Tools Used

None

## Recommended Mitigation Steps

Either prevent duplicates in the splits or track the matches while checking the locked splits.




